varianza <- var(muestra)
#2
cat(muestra, file = "datos.txt", append = TRUE, sep = "\t")
cat(media, file = "datos.txt", append = TRUE, sep = "\t")
cat(varianza, file = "datos.txt", append = TRUE, sep = "\n")
totalMedias <- c(totalMedias, media)
totalVarianzas <- c(totalVarianzas, varianza)
}
#3
muestra <- rnorm(1000, mean = 25, sd = sqrt(5))
media <- mean(muestra)
varianza <- var(muestra)
# Distr. media muestral
#4
hist(totalMedias, main = "Histograma de la media muestral")
x = muestra # Puesto porque si no da fallo el resto en las funciones de probabilidad diciendo que quiere X
#5
lines(dnorm(x, mean = media, sd = sqrt(5)))
#6
lines(dt(x, df = varianza))
# Distr. varianza muestral
#7
hist(totalVarianzas, main = "Histograma de la varianza muestral")
#8
lines(dchisq(x, df = varianza), col = "blue", main = "Grafica de chi cuadrado")
# Toma de muestras aleatorias
totalMedias <-c()
totalVarianzas <-c()
sink("datos.txt")
cat("Muestra -- Media -- Varianza", file = "datos.txt", append = TRUE, sep = "\n")
for (j in 1:100) {
#1
muestra <- rnorm(10, mean = 25, sd = sqrt(5))
media <- mean(muestra)
varianza <- var(muestra)
#2
cat(muestra, file = "datos.txt", append = TRUE, sep = "\t")
cat(media, file = "datos.txt", append = TRUE, sep = "\t")
cat(varianza, file = "datos.txt", append = TRUE, sep = "\n")
totalMedias <- c(totalMedias, media)
totalVarianzas <- c(totalVarianzas, varianza)
}
#3
muestra <- rnorm(1000, mean = 25, sd = sqrt(5))
media <- mean(muestra)
varianza <- var(muestra)
# Distr. media muestral
#4
hist(totalMedias, main = "Histograma de la media muestral")
x = muestra # Puesto porque si no da fallo el resto en las funciones de probabilidad diciendo que quiere X
#5
lines(dnorm(x, mean = media, sd = sqrt(5)))
#6
lines(dt(x, df = varianza))
#MEI - Practica sobre la inferencia utilizando R
#Por Mikel Iceta Tena
#------------------TOMA DE MUESTRAS ALEATORIAS (PARTE 1 DE 3)-----------------------------------
#crear 100 muestras aleatorias de tamaño 10
#Datos: n=10, Poblacion NORMAL, media=25 var=5
desvTipica= sqrt(5);
Datos <- c() #vector que guardará las muestras
sink("InferenciaMEI.txt") #archivo sobre el que trabajar con cat()
#----------------------------------APARTADO 1----------------------------------
varianzas <- c() #vector para almacenar las varianzas muestrales
mediasDeColor <- c() #vector para almacenar las medias muestrales
#Genero las muestras y las trato
for(i in 0:99){
aux <- rnorm(10, 25, desvTipica)
Datos <- c(Datos, aux) #añado al vector este resultado
varianzas <- c(varianzas, var(aux))
mediasDeColor <- c(mediasDeColor, mean(aux))
}
#----------------------------------APARTADO 2----------------------------------
#Ya tengo lo necesario, ahora guardamos los datos a un .txt
#En cada linea: datos de muestra, media y varianza muestrales
for(i in 1:100){
for(j in 0:9){
cat(Datos[i+j], " ")
}
cat(mediasDeColor[i]," ",varianzas[i],"\n")
}
#----------------------------------APARTADO 3----------------------------------
#Estimar la media (µο) y la varianza muestral (Sigmao^2))como media y varianza
#de los 10x100= 1000 datos
#No se si este ejercicio se refiere a que haga una estimacion de los parametros
#o a que calcule la media y varianza del vector, mis compañeros me dicen que
#lo segundo
totalMedia <- mean(Datos)
totalVarianza <- var(Datos)
cat("\n","\n", "La media de los datos es ", totalMedia, "\n")
cat("La varianza de los datos es ", totalVarianza, "\n")
#---------------DISTRIBUCION DE LA MEDIA MUESTRAL (PARTE 2 DE 3)--------------------------------
#----------------------------------APARTADO 4----------------------------------
#Representacion en un histograma de las medias muestrales
#hist()
hist(mediasDeColor, main="Histograma de las medias muestrales", freq=FALSE)
#----------------------------------APARTADO 5----------------------------------
#Curva de la distribución normal de media mu0 y varianza 5 sobre el hist.
#sort para ordenar las medias, dnorm para generar la dist.norm de las medias
mediasOrdenadas <- sort(mediasDeColor)
distNorm <- dnorm(mediasOrdenadas,mean=25, desvTipica/sqrt(10))
#lines para dibujar por encima de un plot ya hecho
lines(mediasOrdenadas, distNorm, col=2)
# Toma de muestras aleatorias
totalMedias <-c()
totalVarianzas <-c()
sink("datos.txt")
cat("Muestra -- Media -- Varianza", file = "datos.txt", append = TRUE, sep = "\n")
for (j in 1:100) {
#1
muestra <- rnorm(10, mean = 25, sd = sqrt(5))
media <- mean(muestra)
varianza <- var(muestra)
#2
cat(muestra, file = "datos.txt", append = TRUE, sep = "\t")
cat(media, file = "datos.txt", append = TRUE, sep = "\t")
cat(varianza, file = "datos.txt", append = TRUE, sep = "\n")
totalMedias <- c(totalMedias, media)
totalVarianzas <- c(totalVarianzas, varianza)
}
#3
muestra <- rnorm(1000, mean = 25, sd = sqrt(5))
media <- mean(muestra)
varianza <- var(muestra)
# Distr. media muestral
#4
hist(totalMedias, main = "Histograma de la media muestral")
x = muestra # Puesto porque si no da fallo el resto en las funciones de probabilidad diciendo que quiere X
#5
lines(dnorm(x, mean = media, sd = sqrt(5)), col = "green")
#6
lines(dt(x, df = varianza), col = "purple")
# Distr. varianza muestral
#7
hist(totalVarianzas, main = "Histograma de la varianza muestral")
#8
lines(dchisq(x, df = varianza), col = "blue", main = "Grafica de chi cuadrado")
# Toma de muestras aleatorias
totalMedias <-c()
totalVarianzas <-c()
sink("datos.txt")
cat("Muestra -- Media -- Varianza", file = "datos.txt", append = TRUE, sep = "\n")
for (j in 1:100) {
#1
muestra <- rnorm(10, mean = 25, sd = sqrt(5))
media <- mean(muestra)
varianza <- var(muestra)
#2
cat(muestra, file = "datos.txt", append = TRUE, sep = "\t")
cat(media, file = "datos.txt", append = TRUE, sep = "\t")
cat(varianza, file = "datos.txt", append = TRUE, sep = "\n")
totalMedias <- c(totalMedias, media)
totalVarianzas <- c(totalVarianzas, varianza)
}
#3
muestra <- rnorm(1000, mean = 25, sd = sqrt(5))
media <- mean(muestra)
varianza <- var(muestra)
# Distr. media muestral
#4
hist(totalMedias, main = "Histograma de la media muestral")
x = totalMedias # Puesto porque si no da fallo el resto en las funciones de probabilidad diciendo que quiere X
#5
lines(dnorm(x, mean = media, sd = sqrt(5)), col = "green")
#6
lines(dt(x, df = varianza), col = "purple")
x = totalVarianzas
# Distr. varianza muestral
#7
hist(totalVarianzas, main = "Histograma de la varianza muestral")
#8
lines(dchisq(x, df = varianza), col = "blue", main = "Grafica de chi cuadrado")
print(Valor de )
#Ejercicio 1
# a. tipo de variable
# Se esta usando una variable discreta, ya que lo que tenemos es una tabla de valores finitos.
# b. calcular tiempo(y) y tamaño(x) medio
xM = 1671.71/9;
yM = 230.64/9
# c. desviacion tipica de las 2 variables
sd(xM)
#Ejercicio 1
# a. tipo de variable
# Se esta usando una variable discreta, ya que lo que tenemos es una tabla de valores finitos.
# b. calcular tiempo(y) y tamaño(x) medio
xM = 1671.71/9;
yM = 230.64/9
# c. desviacion tipica de las 2 variables
xSd= sd(xM)
ySd= sd(yM)
a = {19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16}
a <- (19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
a <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
xSd= sd(a)
#Ejercicio 1
a <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
# a. tipo de variable
# Se esta usando una variable discreta, ya que lo que tenemos es una tabla de valores finitos.
# b. calcular tiempo(y) y tamaño(x) medio
xM = 1671.71/9;
yM = 230.64/9
# c. desviacion tipica de las 2 variables
#desv. tipicas
xSd= sd(a)
ySd= sd(yM)
a <- list(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
xSd= sd(a)
a <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16, length = 3)
a <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16, round = 3)
a <- as.numeric(c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16))
a <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16, round(a,2))
a <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
print(a[0])
print(a[2])
print(a[5])
#Ejercicio 1
a <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
# a. tipo de variable
# Se esta usando una variable discreta, ya que lo que tenemos es una tabla de valores finitos.
# b. calcular tiempo(y) y tamaño(x) medio
xM = 1671.71/9;
yM = 230.64/9
# c. desviacion tipica de las 2 variables
#desv. tipicas
xSd = sd(a)
ySd = sd(yM)
xM = sum(xNum)/length(xNum);
#Ejercicio 1
xNum <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
# a. tipo de variable
# Se esta usando una variable discreta, ya que lo que tenemos es una tabla de valores finitos.
# b. calcular tiempo(y) y tamaño(x) medio
xM = sum(xNum)/length(xNum);
yM = 230.64/9
# c. desviacion tipica de las 2 variables
#desv. tipicas
xSd = sd(a)
ySd = sd(yM)
xVar = var(xNum)
yVar =
xSd = sqrt(xVar)
#Ejercicio 1
xNum <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
# a. tipo de variable
# Se esta usando una variable discreta, ya que lo que tenemos es una tabla de valores finitos.
# b. calcular tiempo(y) y tamaño(x) medio
xM = sum(xNum)/length(xNum);
yM = 230.64/9
# c. desviacion tipica de las 2 variables
#varianzas
xVar = var(xNum)
yVar =
xSd = sqrt(xVar)
xVar = sum((xNum - mean(xNum))^2) / 10
yVar =
xSd = sqrt(xVar)
#Ejercicio 1
xNum <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
# a. tipo de variable
# Se esta usando una variable discreta, ya que lo que tenemos es una tabla de valores finitos.
# b. calcular tiempo(y) y tamaño(x) medio
xM = sum(xNum)/length(xNum);
yM = 230.64/9
# c. desviacion tipica de las 2 variables
#varianzas
xVar = sum((xNum - mean(xNum))^2) / 10
yVar =
xSd = sqrt(xVar)
xVar = sum((xNum - mean(xNum))^2) / 9
yVar =
xSd = sqrt(xVar)
#Ejercicio 1
xNum <- c(19.73,29.38,22.85,26.95,30.52,23.35,29.69355,23.01,25.16)
yNum <- c(133.03,217.53,161.20,198.66,226.00,182.07,188.33,180.41,184.48)
# a. Tipo de variable?
# Se esta usando una variable discreta, ya que lo que tenemos es una tabla de valores finitos.
# b. Calcular tiempo(y) y tamaño(x) medio
xM = sum(xNum)/length(xNum);
yM = 230.64/9
# c. Desviacion tipica de las 2 variables
#varianzas
xVar = sum((xNum - mean(xNum))^2) / length(xNum)
yVar = sum((yNum - mean(yNum))^2) / length(yNum)
#desv. estandar
xSd = sqrt(xVar)
ySd = sqrt(yVar)
# d. Representar los tiempos en un diagrama de cajas
boxplot(data=xNum, main="Car Milage Data", xlab="Number of Cylinders", ylab="Miles Per Gallon")
boxplot(xNum)
boxplot(xNum, horizontal = true)
boxplot(yNum)
boxplot(yNum, horizontal = TRUE)
cov(xNum,yNum)
plot(xNum,yNum)
yM = mean(yNum)
230.64/9
yM = 230.64/9
yNum
yM = mean(yNum)
xVar = sum((xNum - xM)^2) / length(xNum)
yVar = sum((yNum - yM)^2) / length(yNum)
plot(xNum,yNum)
lm(xNum - yNum)
lm(xNum ~ yNum)
abline(3.3882, 0.1197)
covPobl = sum(xNum * yNum)/length(xNum)
covPobl = sum(xNum * yNum)
covPobl = sum(xNum * yNum)/length(xNum) - xM * yM
line = covPobl / xVar * (x - xM) + yM
lm(y~x)
lm(yNum~xNum)
abline(rectaRegresion)
rectaRegresion = lm(yNum~xNum)
abline(rectaRegresion)
abline(rectaRegresion, lwd=1.5)
predict(rectaRegresion, data.frame(xNum = 27))
print (predict(rectaRegresion, data.frame(xNum = 27)))
print ("La prediccion es " predict(rectaRegresion, data.frame(xNum = 27)))
print ("La prediccion es ", predict(rectaRegresion, data.frame(xNum = 27)))
sprintf ("La prediccion es %i", predict(rectaRegresion, data.frame(xNum = 27)))
sprintf ("La prediccion es %f", predict(rectaRegresion, data.frame(xNum = 27)))
sprintf ("La prediccion para 27Mb es de %fs", predict(rectaRegresion, data.frame(xNum = 27)))
sprintf ("La prediccion para 27Mb es de %f.2s", predict(rectaRegresion, data.frame(xNum = 27)))
sprintf ("La prediccion para 27Mb es de %.4fs", predict(rectaRegresion, data.frame(xNum = 27)))
integrate(k*x^2, lower=0, upper=1)
func <- function(x)(k*x^2)
integrate(func, lower=0, upper=1)
func <- function(x,k)(k*x^2)
integrate(func, lower=0, upper=1)
func <- function(x,k){(k*x^2)}
integrate(func, lower=0, upper=1)
integrate(function(x,k){(k*x^2)}, lower=0, upper=1)
integrate(func, 0,1)
func <- function(x,k){(k*x^2)}
integrate(func, 0,1)
func <- function(x,k){k*x^2}
integrate(func, lower=0, upper=1)
func <- function(x,k=1){k*x^2}
integrate(func, lower=0, upper=1)
func <- function(x,k=10){k*x^2}
integrate(func, lower=0, upper=1)
func <- function(x){k*x^2}
integrate(func, lower=0, upper=1)
library(cubature)
install.packages("cubature")
library(cubature)
func <- function(x){k*x^2}
adaptIntegrate(func, lower=0, upper=1)
integrate(func, lower=0, upper=1)
func <- function(x){k*x^2}
integrate(func, lower=0, upper=1)
integrate(k*x^2, lower=0, upper=1)
func <- function(x){k*x^2}
integrate(func, lower=0, upper=1)
func <- function(x, k=1){k*x^2}
z <- integrate(func, lower=0, upper=1)
1/z$value
1/z
integrate(func, k=3, lower=0, upper=x)
integrate(1/z$value * x^2, lower=0, upper=x)
func <- function(x, k=1/z$value){k*x^2}
integrate(func, lower=0, upper=x)
func <- function(x, k=1/z$value){k*x^2}
integrate(func, lower=0, upper=t)
integrand <- function(t) {3*t^2}
integral <- Vectorize(function(z) integrate(integrand, lower = 0, upper = z)$value)
1 - integral(1/2)
print(integral)
View(integral)
integral <- Vectorize(function(x) integrate(integrand, lower = 0, upper = x)$value)
print(integral)
1 - integral(1/2)
integral$value
View(integral)
integral(1)
str(integral)
mode(integral)
class(integral)
integral[1]
View(integral)
func <- function(x,){x*3*x^2}
ex <- integrate(func, lower=0, upper=1)
func <- function(x){x*3*x^2}
ex <- integrate(func, lower=0, upper=1)
integrate(func, lower=0, upper=1)
ex <- integrate(func, lower=0, upper=1).value
ex <- integrate(func, lower=0, upper=1).value
ex <- (integrate(func, lower=0, upper=1)).value
func <- function(x){x^2*3*x^2}
ex2 <- integrate(func, lower=0, upper=1)
varX = ex2 - ex^2
varX = ex2.value - ex.value^2
func <- function(x){x*3*x^2}
ex <- integrate(func, lower=0, upper=1)
func <- function(x){x^2*3*x^2}
ex2 <- integrate(func, lower=0, upper=1)
varX = ex2.value - ex.value^2
ex2.value
ex.value
print(ex2.value)
print(ex2[value])
print(ex2[0])
print(ex2[2])
print(ex2[1])
varX = ex2[1] - ex[1]^2
varX = ex2[1] - (ex[1])^2
ex[1]
ex[1]^2
a = ex[1]
a^2
(a)^2
a = ex[1].as_number
a = as.numeric(ex[1])
(a)^2
varX = ex2[1] - (as.numeric(ex[1]))^2
varX = as.numeric(ex2[1]) - (as.numeric(ex[1]))^2
# e. Si tenemos 150 observaciones de X, calcular la probabilidad de que al menos 135 sean mayores de 1/2
p = 7/8
m = 150*p
s2 = 150*p*q
s = sqrt(s2)
p = 7/8
m = 150*p
q = 1 - p
s2 = 150*p*q
s = sqrt(s2)
X = pnorm(16.40, 5.05)
X = pnorm(16.40, sd=4.05)
X = pnorm(s2, sd=4.05)
X = rnorm(s2, sd=4.05)
p
X = pnorm(s2, sd=4.05)
X = dnorm(s2, sd=4.05)
X = qnorm(s2, sd=4.05)
X = rnorm(s2, sd=4.05)
X = pnorm(s2, sd=4.05)
X = pnorm(s2,s2)
X = pnorm(s,s2)
X = pnorm(s2,s)
2
X = pnorm(m,s2)
X = pnorm(m,s2^2)
X = pnorm(m,s2)
X = pnorm(0.97)
X = pnorm( (135 - m)/(s) )
1 - X
func <- function(x, k=1/z$value){k*x^2}
integrate(func, lower=0, upper=t)
func <- function(x, k=1){k*x^2}
z <- integrate(func, lower=0, upper=1)
1/z$value # como k * z == 1, podemos sacar el valor de k diviendo 1/valor de integral
# b. Calcular funcion de distribucion de X
func <- function(x, k=1/z$value){k*x^2}
integrate(func, lower=0, upper=t)
# a. Calcular valor de k para que f sea funcion de densidad
func <- function(x, k=1){k*x^2}
z <- integrate(func, lower=0, upper=1)
1/z$value # como k * z == 1, podemos sacar el valor de k diviendo 1/valor de integral
# b. Calcular funcion de distribucion de X
func <- function(x, k=1/z$value){k*x^2}
integrate(func, lower=0, upper=t)
integrand <- function(t) {3*t^2}
integral <- Vectorize(function(x) integrate(integrand, lower = 0, upper = x)$value)
1 - integral(1/2)
integrand <- function(x) {x*1/b}
integral <- Vectorize(function(b) integrate(integrand, lower = 0, upper = b)$value)
ex = integral$value
ex = integral$value[0]
ex = integral$value[1]
ex = integral[1]
integral[1]
View(integral)
integral(1)
integrand <- function(x,b) {x*1/b}
integral <- Vectorize(function(b) integrate(integrand, lower = 0, upper = b)$value)
integral(1)
integrand <- function(x,b=1) {x*1/b}
integral <- Vectorize(function(b) integrate(integrand, lower = 0, upper = b)$value)
integral(1)
integral[0]
integrand <- function(x,b=1) {x^2*1/b}
integral2 <- Vectorize(function(b) integrate(integrand, lower = 0, upper = b)$value)
var2 = integral2(1) - integral(1)^2
eb2 = 2 * n * ex / n
n=1
eb2 = 2 * n * ex / n
eb2 = 2 * n * integral / n
n=1
eb2 = 2 * n * integral / n
varb = var2 /
error = sqrt(varb)
varb = var2 / n
error = sqrt(varb)
datos <- c(595,685,640,619,604,666,608,605,604,619,587,612,632,607,586,582,636,670,638,562,593,610)
media = datos/22
media = mean(datos)
varianza = variance(datos)
datos <- c(595,685,640,619,604,666,608,605,604,619,587,612,632,607,586,582,636,670,638,562,593,610)
media = mean(datos)
varianza = variance(datos)
varianza = var(datos)
sd = sd(datos)
qt(0.995,21)
variacion = aux * sd/sqrt(length(datos))
aux = qt(0.995,21)
variacion = aux * sd/sqrt(length(datos))
upperBound = media + variacion
lowerBound = media - variacion
aux = (640-media)/(sd/sqrt(length(datos)))
aux2 = dt(x,21)
aux2 = dt(c,21)
aux2 = dt(aux,21)
